"""
main.py - Flask app for X-ray Fracture Detection & Gemini Explainability (YOLOv8, google-genai)

Features:
- User uploads X-ray; YOLOv8 detects fractures.
- Every upload: saves bounding box details and Gemini explanation as text files in user_uploads/<uuid>.
- Displays a beautiful, crisp, user-friendly AI summary and Gemini explanation on the results page.
"""

import os
import uuid
import cv2
from flask import Flask, request, render_template, redirect, url_for, send_from_directory, flash
from werkzeug.utils import secure_filename
from PIL import Image

# YOLOv8 import
from ultralytics import YOLO

# Gemini API import
import google.generativeai as genai

# --- Config ---
UPLOAD_FOLDER = 'user_uploads'
ALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg'}
MODEL_PATH = '/Users/akshatgupta111/Documents/main_app/best_fracture_yolov8.pt'
GEMINI_API_KEY = "AIzaSyD2ZLstBUhaACqUdbWkoIMnEb6DiMGOY84"

app = Flask(__name__)
app.secret_key = 'supersecret'
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)

# --- Load YOLOv8 Model ---
if os.path.exists(MODEL_PATH):
    model = YOLO(MODEL_PATH)
else:
    model = None
    print(f"Model file {MODEL_PATH} not found. Please place it in the app directory.")

# --- Gemini Client Setup ---
genai.configure(api_key=GEMINI_API_KEY)
gemini_client = genai.GenerativeModel("gemini-2.5-flash")

def allowed_file(filename):
    """Check image extension."""
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

def semantic_summary(detections):
    """Create a structured, beautiful summary from AI detections (before LLM call)."""
    if not detections:
        findings = (
            "<span style='color:green;'><strong>All clear:</strong> No signs of fracture were detected by the AI.</span>"
        )
        confidence = ""
        seriousness = (
            "There is no evidence of bone injury in this X-ray, according to the AI assistant."
        )
        next_steps = (
            "You should still review these results with your doctor for a complete medical evaluation."
        )
    else:
        findings_list = []
        for i, d in enumerate(detections):
            findings_list.append(
                f"<li><b>Fracture {i+1}:</b> <b>Location</b>: {d['box']} &mdash; <b>Possible fracture</b> "
                f"(label: {d['label']})</li>"
            )
        findings = "<ul>" + "".join(findings_list) + "</ul>"
        conf_list = []
        for i, d in enumerate(detections):
            conf = d['confidence']
            if conf > 0.85:
                level = "high"
                color = "green"
            elif conf > 0.7:
                level = "moderate"
                color = "orange"
            else:
                level = "low"
                color = "red"
            conf_list.append(
                f"<li><b>Fracture {i+1}:</b> <span style='color:{color};'>Confidence: {conf:.2f} ({level})</span></li>"
            )
        confidence = "<ul>" + "".join(conf_list) + "</ul>"
        seriousness = (
            "These are preliminary AI findings only. Even a single low-confidence flag should be reviewed by a doctor."
        )
        next_steps = (
            "Please consult your doctor to review these findings. Only a medical professional can make a diagnosis."
        )
    disclaimer = (
        "<div style='font-size:0.9em;color:#666;margin-top:12px;'>"
        "This summary is generated by AI for informational purposes and is not a diagnosis."
        "</div>"
    )
    # Compose as HTML card
    return f"""
    <div class="summary-card">
        <h4>Findings:</h4>
        {findings}
        <h4>Confidence:</h4>
        {confidence}
        <h4>Seriousness:</h4>
        <p>{seriousness}</p>
        <h4>Next Steps:</h4>
        <p>{next_steps}</p>
        {disclaimer}
    </div>
    """

def detect_fractures(image_path):
    """
    Runs YOLOv8 inference, returns:
    - result image path (with boxes)
    - detections (list of dicts: label, confidence, box, size)
    """
    if model is None:
        raise RuntimeError("Model not loaded.")
    results = model(image_path)
    detections = []
    img = cv2.imread(image_path)
    if len(results[0].boxes) == 0:
        result_path = image_path.replace('.', '_result.', 1)
        cv2.imwrite(result_path, img)
        return result_path, []
    for box in results[0].boxes:
        x1, y1, x2, y2 = map(int, box.xyxy[0].tolist())
        conf = float(box.conf[0])
        cls = int(box.cls[0])
        label = f'{model.names[cls]} {conf:.2f}'
        cv2.rectangle(img, (x1, y1), (x2, y2), (0, 0, 255), 2)
        cv2.putText(img, label, (x1, y1 - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 0, 255), 2)
        detections.append({
            "label": model.names[cls],
            "confidence": conf,
            "box": [x1, y1, x2, y2],
            "size": (x2 - x1) * (y2 - y1)
        })
    result_path = image_path.replace('.', '_result.', 1)
    cv2.imwrite(result_path, img)
    return result_path, detections

def summarize_fractures_with_gemini(image_path, detections):
    """
    Combines semantic summary and Gemini's LLM for an optional "second opinion".
    Always returns beautiful, crisp HTML.
    """
    # Step 1: Use the semantic template summary
    user_summary = semantic_summary(detections)

    # Step 2: Optionally, get a simplified Gemini comment (not the full summary)
    with open(image_path, "rb") as f:
        img_bytes = f.read()
    if len(detections) == 0:
        prompt = (
            "This is an X-ray image. No fractures were detected by the AI model. "
            "In one or two sentences, reassure the patient and encourage consulting a doctor if they're concerned."
        )
    else:
        prompt = (
            "Given the AI's detection of possible fractures with these confidence scores:\n"
            + "\n".join([
                f"Fracture {i+1}: {d['label']}, confidence: {d['confidence']:.2f}, location: {d['box']}"
                for i, d in enumerate(detections)
            ]) +
            "\nIn plain English, explain why it's important to consult a doctor and that this is not a diagnosis."
        )
    try:
        response = gemini_client.generate_content(
            [prompt, {"mime_type": "image/jpeg", "data": img_bytes}]
        )
        gemini_reply = response.text
    except Exception as e:
        gemini_reply = f"Gemini API error: {e}"
    # Compose the full summary: our semantic + Gemini's comment
    full_summary = (
        user_summary +
        "<div class='gemini-section'><h4>AI Assistant Note:</h4>"
        + (gemini_reply or "No additional note from the assistant.") +
        "</div>"
    )
    return full_summary

def save_detection_summary(user_dir, detections, gemini_explanation):
    """
    Save detections and Gemini explanation as text files in user_dir.
    - detections.txt: human-readable list of detections (or 'No fractures detected').
    - summary.txt: Gemini explanation for the patient.
    """
    det_path = os.path.join(user_dir, "detections.txt")
    sum_path = os.path.join(user_dir, "summary.txt")
    with open(det_path, "w") as f:
        if len(detections) == 0:
            f.write("No fractures detected.\n")
        else:
            for i, d in enumerate(detections):
                f.write(f"Fracture {i+1}: label={d['label']}, confidence={d['confidence']:.2f}, "
                        f"box={d['box']}, size={d['size']}\n")
    with open(sum_path, "w") as f:
        f.write(gemini_explanation + "\n")

# --- Flask Routes ---

@app.route("/", methods=["GET"])
def index():
    return redirect(url_for("create"))

@app.route("/create", methods=["GET", "POST"])
def create():
    myid = str(uuid.uuid4())
    if request.method == "POST":
        received_id = request.form.get("uuid", myid)
        file = request.files.get("file")
        if model is None:
            flash("Model not loaded. Please contact admin.")
            return render_template("create.html", myid=myid)
        if file and allowed_file(file.filename):
            filename = secure_filename(file.filename)
            user_dir = os.path.join(app.config['UPLOAD_FOLDER'], received_id)
            os.makedirs(user_dir, exist_ok=True)
            img_path = os.path.join(user_dir, filename)
            file.save(img_path)
            # Run detection
            try:
                result_img_path, detections = detect_fractures(img_path)
            except Exception as e:
                flash(f"Detection failed: {e}")
                return render_template("create.html", myid=myid)
            # Always call Gemini and always show result
            gemini_explanation = summarize_fractures_with_gemini(result_img_path, detections)
            # Always save detections and Gemini summary
            save_detection_summary(user_dir, detections, gemini_explanation)
            return render_template(
                "result.html",
                orig_img=url_for('uploaded_file', uuid=received_id, filename=filename),
                result_img=url_for('uploaded_file', uuid=received_id, filename=os.path.basename(result_img_path)),
                detections=detections,
                gemini_explanation=gemini_explanation
            )
        else:
            flash("Invalid file type. Please upload a PNG or JPEG X-ray image.")
    return render_template("create.html", myid=myid)

@app.route("/user_uploads/<uuid>/<filename>")
def uploaded_file(uuid, filename):
    """Serve uploaded and result images."""
    return send_from_directory(os.path.join(app.config['UPLOAD_FOLDER'], uuid), filename)

@app.route("/clear_uploads")
def clear_uploads():
    """Delete all uploads - dev/testing only."""
    import shutil
    shutil.rmtree(app.config['UPLOAD_FOLDER'], ignore_errors=True)
    os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)
    return "Uploads cleared."

if __name__ == "__main__":
    print("main.py loaded")
    print("Starting Flask app...")
    app.run(debug=True)